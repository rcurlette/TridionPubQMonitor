<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <appSettings>
    
    <!-- Core Service USer - Should be Tridion User Account-->
    <add key="Username" value="Admin"/>
    <add key="Password" value="password"/>
    <add key="EndPoint" value="basicHttp_2013"/>

    <!-- run the service every 30 seconds.  This is how long it will 'wait' before kicking an item out... -->
    <add key="TimeIntervalForService" value="30"/>

    <!-- number of seconds to have service scan the publish queue and check if items still in rendering state - if so, remove them-->
    <!-- value of 1200 (seconds) = 20 mins of queue items -->
    <add key="PubQItemsInLastXSeconds" value="1200"/>

    <!-- Other values are 'Success', 'Rendering'.  // Success and Failed are mostly used for testing when we don't have items stuck in rendering-->
    <add key="PublishState" value="Failed"/>
    
    <!-- Set value to true to stop and start the publisher service. Set value to false to not try to start and stop.  The user account running this service must have rights to start and stop services. -->
    <add key="RestartPublisher" value="true"/>

    <!-- Set value to true if we want to Rename the item when it has a problem -->
    <!-- Adding this text to it:  PLEASE DO NOT PUBLISH THIS PAGE - HAS PUBLISHING ISSUE.  CONTACT SUPPORT. -->
    <add key="RenameItem" value="true"/>

    <!-- Email Settings -->
    <add key="SendTestEmailOnStartup" value="true"/>
    <add key="SendEmailOnError" value="false"/>
    <add key="MailSubject" value="Publish Queue Monitoring - Removed item from Publish Queue taking to long to render"/>
    <add key="MailFrom" value="nobody@nothing.com"/>
    <add key="MailTo" value="everyone@all.com"/>
    <add key="smtpServer" value="mailtrap.io"/>
    <add key="smtpPort" value="2525"/>
    <add key="smtpUser" value=""/>
    <add key="smtpPw" value=""/>
    <add key="enableSSL" value="true"/>
  </appSettings>
    <system.serviceModel>
      <!-- Default/example WCF settings for Core Service. These settings should be copied into the host application's configuration file. -->
      <bindings>
        <!-- Default Core Service binding settings are provided here. These can be used as a starting point for further customizations. -->
        <basicHttpBinding>
          <binding name="basicHttp" maxReceivedMessageSize="10485760">
            <readerQuotas maxStringContentLength="10485760" maxArrayLength="10485760" />
            <security mode="TransportCredentialOnly">
              <!-- For LDAP or SSO authentication of transport credentials, use clientCredentialType="Basic" -->
              <transport clientCredentialType="Windows" />
            </security>
          </binding>
          <binding name="streamDownload_basicHttp" maxReceivedMessageSize="209715200" transferMode="StreamedResponse" messageEncoding="Mtom" sendTimeout="00:10:00">
            <security mode="TransportCredentialOnly">
              <!-- For LDAP or SSO authentication of transport credentials, use clientCredentialType="Basic" -->
              <transport clientCredentialType="Windows" />
            </security>
          </binding>
          <binding name="streamUpload_basicHttp" maxReceivedMessageSize="209715200" transferMode="StreamedRequest" messageEncoding="Mtom" receiveTimeout="00:10:00">
            <security mode="None" />
          </binding>
        </basicHttpBinding>
        <wsHttpBinding>
          <binding name="wsHttp" transactionFlow="true" maxReceivedMessageSize="10485760">
            <readerQuotas maxStringContentLength="10485760" maxArrayLength="10485760" />
            <security mode="Message">
              <message clientCredentialType="Windows" />
            </security>
          </binding>
        </wsHttpBinding>
        <netTcpBinding>
          <binding name="netTcp" transactionFlow="true" transactionProtocol="OleTransactions" maxReceivedMessageSize="10485760">
            <readerQuotas maxStringContentLength="10485760" maxArrayLength="10485760" />
          </binding>
          <binding name="streamDownload_netTcp" maxReceivedMessageSize="2147483647" transferMode="StreamedResponse" sendTimeout="00:10:00" />
          <binding name="streamUpload_netTcp" maxReceivedMessageSize="2147483647" transferMode="StreamedRequest" receiveTimeout="00:10:00" />
        </netTcpBinding>
        <!-- Default binding settings for SAML compliant federated authentication -->
        <ws2007FederationHttpBinding>
          <binding name="wsFederationHttp" transactionFlow="true" maxReceivedMessageSize="10485760">
            <readerQuotas maxStringContentLength="10485760" maxArrayLength="10485760" />
            <security mode="Message">
              <!-- For asymmetric key configuration, use issuedKeyType="AsymmetricKey" -->
              <!-- For SAML 1.1 compliance, use issuedTokenType="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1" -->
              <message negotiateServiceCredential="false" issuedKeyType="SymmetricKey" issuedTokenType="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0" />
            </security>
          </binding>
        </ws2007FederationHttpBinding>
        <customBinding>
          <binding name="netFederationTcp" receiveTimeout="00:10:00">
            <transactionFlow transactionProtocol="OleTransactions" />
            <security authenticationMode="SecureConversation" requireSecurityContextCancellation="true" requireSignatureConfirmation="false">
              <secureConversationBootstrap authenticationMode="IssuedTokenForCertificate" requireSignatureConfirmation="false">
                <!-- For asymmetric key configuration, use keyType="AsymmetricKey" and remove the keySize attribute -->
                <!-- For SAML 1.1 compliance, use tokenType="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1" -->
                <issuedTokenParameters tokenType="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0" keySize="256" keyType="SymmetricKey" />
              </secureConversationBootstrap>
            </security>
            <binaryMessageEncoding>
              <readerQuotas maxStringContentLength="10485760" maxArrayLength="10485760" />
            </binaryMessageEncoding>
            <tcpTransport />
          </binding>
        </customBinding>
      </bindings>
      <client>
        <!-- 
      Default Core Service endpoint settings are provided here. The endpoint name should be specified when constructing a proxy service instance.
      The mapping between proxy service types and applicable endpoint names is as follows (see also the contracts specified on each endpoint):
      CoreServiceClient: basicHttp
      SessionAwareCoreServiceClient: wsHttp, netTcp
      StreamDownloadClient: streamDownload_basicHttp, streamDownload_netTcp
      StreamUploadClient: streamUpload_basicHttp, streamUpload_netTcp
      -->
        <endpoint name="basicHttp_2013" address="http://localhost/webservices/CoreService2013.svc/basicHttp" binding="basicHttpBinding" bindingConfiguration="basicHttp" contract="Tridion.ContentManager.CoreService.Client.ICoreService" />
        <endpoint name="streamDownload_basicHttp_2013" address="http://localhost/webservices/CoreService2013.svc/streamDownload_basicHttp" binding="basicHttpBinding" bindingConfiguration="streamDownload_basicHttp" contract="Tridion.ContentManager.CoreService.Client.IStreamDownload" />
        <endpoint name="streamUpload_basicHttp_2013" address="http://localhost/webservices/CoreService2013.svc/streamUpload_basicHttp" binding="basicHttpBinding" bindingConfiguration="streamUpload_basicHttp" contract="Tridion.ContentManager.CoreService.Client.IStreamUpload" />
        <!-- endpoint name="batch_basicHttp_2013" address="http://localhost/webservices/CoreService2013.svc/batch_basicHttp" binding="basicHttpBinding" bindingConfiguration="basicHttp" contract="Tridion.ContentManager.CoreService.Client.ICoreServiceBatch" /-->
        <endpoint name="wsHttp_2013" address="http://localhost/webservices/CoreService2013.svc/wsHttp" binding="wsHttpBinding" bindingConfiguration="wsHttp" contract="Tridion.ContentManager.CoreService.Client.ISessionAwareCoreService">
          <identity>
            <dns value="localhost" />
          </identity>
        </endpoint>
        <endpoint name="netTcp_2013" address="net.tcp://localhost:2660/CoreService/2013/netTcp" binding="netTcpBinding" bindingConfiguration="netTcp" contract="Tridion.ContentManager.CoreService.Client.ISessionAwareCoreService" />
        <endpoint name="streamDownload_netTcp_2013" address="net.tcp://localhost:2660/CoreService/2013/streamDownload_netTcp" binding="netTcpBinding" bindingConfiguration="streamDownload_netTcp" contract="Tridion.ContentManager.CoreService.Client.IStreamDownload" />
        <endpoint name="streamUpload_netTcp_2013" address="net.tcp://localhost:2660/CoreService/2013/streamUpload_netTcp" binding="netTcpBinding" bindingConfiguration="streamUpload_netTcp" contract="Tridion.ContentManager.CoreService.Client.IStreamUpload" />
        <endpoint name="batch_netTcp_2013" address="net.tcp://localhost:2660/CoreService/2013/batch_netTcp" binding="netTcpBinding" bindingConfiguration="netTcp" contract="Tridion.ContentManager.CoreService.Client.ICoreServiceBatch" />
        <!-- Default endpoint settings for SAML compliant federated authentication -->
        <endpoint name="wsSamlHttp_2013" address="http://localhost/webservices/CoreService2013.svc/wsFederationHttp" binding="ws2007FederationHttpBinding" bindingConfiguration="wsFederationHttp" contract="Tridion.ContentManager.CoreService.Client.ISessionAwareCoreService">
          <identity>
            <dns value="localhost" />
          </identity>
        </endpoint>
        <endpoint name="netSamlTcp_2013" address="net.tcp://localhost:2660/CoreService/2013/netFederationTcp" binding="customBinding" bindingConfiguration="netFederationTcp" contract="Tridion.ContentManager.CoreService.Client.ISessionAwareCoreService" />
        <endpoint name="batch_netSamlTcp_2013" address="net.tcp://localhost:2660/CoreService/2013/batch_netFederationTcp" binding="customBinding" bindingConfiguration="netFederationTcp" contract="Tridion.ContentManager.CoreService.Client.ICoreServiceBatch" />
      </client>
      <!-- 
    Use these behavior settings for SAML compliant federated authentication. 
    Configure the clientCertificate and serviceCertificate - adjust the store locations, store names and subject names for your certificates.
    Client certificate is used to issue SAML tokens, and service certificate represents the target CoreService host.

    <behaviors>
      <endpointBehaviors>
        <behavior>
          <clientCredentials type="Tridion.ContentManager.CoreService.Client.Security.ClaimsClientCredentials, Tridion.ContentManager.CoreService.Client" supportInteractive="false">
            <clientCertificate storeLocation="LocalMachine" storeName="My" x509FindType="FindBySubjectName" findValue="SamlTokenIssuer" />
            <serviceCertificate>
              <defaultCertificate storeLocation="LocalMachine" storeName="TrustedPeople" x509FindType="FindBySubjectName" findValue="localhost" />
            </serviceCertificate>
          </clientCredentials>
        </behavior>
      </endpointBehaviors>
    </behaviors>
    -->
    </system.serviceModel>
  </configuration>